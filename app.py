import streamlit as st
import requests
import pandas as pd
import time

st.set_page_config(page_title="Binance 4h Volume Explosion Tracker", layout="wide")
st.title("ðŸ’¥ Binance 4h Liquidity Spike Tracker")

BASE_URL = "https://api.binance.com/api/v3"

# âœ… Ø¬Ù„Ø¨ ÙƒÙ„ Ø£Ø²ÙˆØ§Ø¬ USDT
def get_usdt_symbols():
    url = f"{BASE_URL}/exchangeInfo"
    r = requests.get(url, timeout=10)
    data = r.json()
    symbols = [
        s["symbol"] for s in data["symbols"]
        if s["quoteAsset"] == "USDT" and s["status"] == "TRADING"
    ]
    return symbols

# âœ… Ø¯Ø§Ù„Ø© ØªØ¬ÙŠØ¨ Ø¨ÙŠØ§Ù†Ø§Øª Ø¢Ø®Ø± 8 Ø³Ø§Ø¹Ø§Øª Ù„Ø£ÙŠ Ø±Ù…Ø²
def get_volume_change(symbol):
    try:
        url = f"{BASE_URL}/klines"
        params = {"symbol": symbol, "interval": "1h", "limit": 8}
        r = requests.get(url, params=params, timeout=10)
        data = r.json()
        if len(data) < 8:
            return None

        vols = [float(candle[5]) for candle in data]  # Ø­Ø¬Ù… Ø§Ù„ØªØ¯Ø§ÙˆÙ„ (volume)
        last4 = sum(vols[-4:])
        prev4 = sum(vols[:4])
        change_pct = ((last4 - prev4) / prev4 * 100) if prev4 != 0 else None

        # Ø§Ù„Ø³Ø¹Ø± Ø§Ù„Ø­Ø§Ù„ÙŠ Ù…Ù† Ø¢Ø®Ø± Ø´Ù…Ø¹Ø©
        close_price = float(data[-1][4])

        return {
            "Symbol": symbol,
            "Prev 4h Vol": round(prev4, 2),
            "Last 4h Vol": round(last4, 2),
            "Change %": round(change_pct, 2) if change_pct is not None else None,
            "Price": round(close_price, 6),
            "TPS": "â€”"  # Ù…Ø¤Ù‚ØªÙ‹Ø§ Ù„Ø­Ø¯ Ù…Ø§ Ù†Ø±Ø¨Ø· Ù…ØµØ¯Ø± Ø§Ù„Ù€ TPS
        }
    except Exception:
        return None

# âœ… ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ø¨ÙŠØ§Ù†Ø§Øª
symbols = get_usdt_symbols()
st.write(f"âœ… Found {len(symbols)} USDT pairs on Binance")

rows = []
progress = st.progress(0)

for i, sym in enumerate(symbols):
    info = get_volume_change(sym)
    if info and info["Change %"] is not None:
        rows.append(info)
    progress.progress((i + 1) / len(symbols))
    time.sleep(0.15)  # Ù„ØªÙ‚Ù„ÙŠÙ„ Ø¶ØºØ· API

df = pd.DataFrame(rows)
df = df.sort_values("Change %", ascending=False).head(50)  # Ø£Ø¹Ù„Ù‰ 50 Ø¹Ù…Ù„Ø©

# âœ… ØªÙ„ÙˆÙŠÙ† Ù…ÙˆØ¬Ø¨ ÙˆØ³Ø§Ù„Ø¨
def color_pos_neg(val):
    try:
        if val is None:
            return ""
        return "color: green" if val > 0 else "color: red"
    except:
        return ""

st.dataframe(
    df.style.applymap(color_pos_neg, subset=["Change %"]),
    use_container_width=True
        )
